{
  "component": "forge-button",
  "framework": "react",
  "schema": {
    "props": {
      "variant": {
        "type": "string",
        "enum": ["primary", "secondary", "outline", "ghost", "destructive"],
        "default": "primary",
        "description": "Button visual variant"
      },
      "size": {
        "type": "string", 
        "enum": ["sm", "md", "lg"],
        "default": "md",
        "description": "Button size"
      },
      "disabled": {
        "type": "boolean",
        "default": false,
        "description": "Whether the button is disabled"
      },
      "loading": {
        "type": "boolean",
        "default": false,
        "description": "Whether the button shows loading state"
      },
      "icon": {
        "type": "string",
        "description": "Icon name to display"
      },
      "href": {
        "type": "string",
        "description": "URL to navigate to (renders as link)"
      },
      "target": {
        "type": "string",
        "enum": ["_blank", "_self", "_parent", "_top"],
        "description": "Link target attribute"
      }
    },
    "events": {
      "onClick": {
        "type": "function",
        "parameters": ["event: MouseEvent"],
        "description": "Fired when button is clicked"
      },
      "onFocus": {
        "type": "function", 
        "parameters": ["event: FocusEvent"],
        "description": "Fired when button receives focus"
      },
      "onBlur": {
        "type": "function",
        "parameters": ["event: FocusEvent"], 
        "description": "Fired when button loses focus"
      }
    },
    "slots": {
      "children": {
        "type": "ReactNode",
        "description": "Button content"
      }
    }
  },
  "examples": [
    {
      "name": "Basic Button",
      "code": "<ForgeButton>Click me</ForgeButton>",
      "description": "Simple button with text content"
    },
    {
      "name": "Primary Action",
      "code": "<ForgeButton variant=\"primary\" onClick={handleSubmit}>Submit</ForgeButton>",
      "description": "Primary button with click handler"
    },
    {
      "name": "Loading State",
      "code": "<ForgeButton loading={isLoading} disabled={isLoading}>Save</ForgeButton>",
      "description": "Button showing loading state"
    },
    {
      "name": "With Icon",
      "code": "<ForgeButton icon=\"plus\" variant=\"outline\">Add Item</ForgeButton>",
      "description": "Button with an icon"
    },
    {
      "name": "Link Button",
      "code": "<ForgeButton href=\"/dashboard\" target=\"_blank\">Go to Dashboard</ForgeButton>",
      "description": "Button that acts as a link"
    }
  ],
  "patterns": [
    {
      "name": "Form Submit",
      "description": "Use for form submission actions",
      "code": "<ForgeButton type=\"submit\" variant=\"primary\" loading={isSubmitting}>Submit Form</ForgeButton>"
    },
    {
      "name": "Destructive Action",
      "description": "Use for dangerous actions like delete",
      "code": "<ForgeButton variant=\"destructive\" onClick={handleDelete}>Delete Item</ForgeButton>"
    },
    {
      "name": "Secondary Action",
      "description": "Use for secondary actions like cancel",
      "code": "<ForgeButton variant=\"secondary\" onClick={onCancel}>Cancel</ForgeButton>"
    }
  ],
  "accessibility": {
    "role": "button",
    "keyboardSupport": ["Enter", "Space"],
    "ariaAttributes": ["aria-label", "aria-pressed", "aria-disabled"],
    "focusManagement": "Receives focus via tab navigation"
  },
  "aiMethods": {
    "getPossibleActions": {
      "description": "Returns available actions based on button state",
      "returns": "AIAction[]",
      "example": "button.getPossibleActions() // [{ name: 'click', description: 'Click the button', available: !disabled }]"
    },
    "explainState": {
      "description": "Explains current button state",
      "returns": "AIStateExplanation",
      "example": "button.explainState() // { currentState: 'enabled', possibleStates: ['enabled', 'disabled', 'loading'] }"
    },
    "aiState": {
      "description": "Returns comprehensive component state for AI",
      "returns": "AIComponentState",
      "example": "button.aiState // Complete component metadata and current state"
    }
  }
}