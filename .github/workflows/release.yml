name: Release & Publish

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/!(release.yml)'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  quality-check:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-20.x-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20.x-
      
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      
      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install chromium
      
      - name: Run linter
        run: npm run lint
      
      - name: Type check
        run: npm run type-check
      
      - name: Run tests with coverage
        run: npm test
      
      - name: Check coverage thresholds
        run: |
          coverage=$(cat coverage/lcov-report/index.html | grep -oP 'class="strong">\K[0-9.]+(?=%)' | head -1)
          echo "Coverage: $coverage%"
          if (( $(echo "$coverage < 75" | bc -l) )); then
            echo "Coverage is below 75% threshold"
            exit 1
          fi
      
      - name: Build library
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  release:
    name: Release & Publish
    needs: quality-check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-20.x-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20.x-
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Determine version bump
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "bump_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Check commit messages for conventional commits
            COMMITS=$(git log $(git describe --tags --abbrev=0 2>/dev/null || echo '')..HEAD --pretty=format:"%s" 2>/dev/null || git log --pretty=format:"%s")
            
            if echo "$COMMITS" | grep -qE "^(feat|fix)!:|BREAKING CHANGE:"; then
              echo "bump_type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
              echo "bump_type=minor" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -qE "^fix(\(.+\))?:"; then
              echo "bump_type=patch" >> $GITHUB_OUTPUT
            else
              echo "No version bump needed"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
      
      - name: Check if should publish
        id: check
        if: steps.version.outputs.skip != 'true'
        run: |
          # Check if package exists on NPM
          if npm view @ignis/forge version 2>/dev/null; then
            echo "Package exists on NPM"
            CURRENT_VERSION=$(npm view @ignis/forge version)
            echo "current_npm_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Package does not exist on NPM yet"
            echo "first_publish=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        id: bump
        if: steps.version.outputs.skip != 'true'
        run: |
          # For first publish, ensure we start at 0.0.1
          if [ "${{ steps.check.outputs.first_publish }}" == "true" ]; then
            npm version 0.0.1 --no-git-tag-version --allow-same-version
          else
            npm version ${{ steps.version.outputs.bump_type }} --no-git-tag-version
          fi
          VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate changelog entry
        if: steps.version.outputs.skip != 'true'
        run: |
          VERSION="${{ steps.bump.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create changelog entry
          cat > CHANGELOG_ENTRY.md << EOF
          ## v$VERSION - $DATE
          
          ### Changes
          EOF
          
          # Add commit messages
          git log $(git describe --tags --abbrev=0 2>/dev/null || echo '')..HEAD --pretty=format:"- %s" >> CHANGELOG_ENTRY.md || echo "- Initial release" >> CHANGELOG_ENTRY.md
          
          # Prepend to CHANGELOG.md (after the header)
          if [ -f CHANGELOG.md ]; then
            head -n 2 CHANGELOG.md > CHANGELOG_NEW.md
            cat CHANGELOG_ENTRY.md >> CHANGELOG_NEW.md
            echo "" >> CHANGELOG_NEW.md
            tail -n +3 CHANGELOG.md >> CHANGELOG_NEW.md
            mv CHANGELOG_NEW.md CHANGELOG.md
          else
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat CHANGELOG_ENTRY.md >> CHANGELOG.md
          fi
          
          rm CHANGELOG_ENTRY.md
      
      - name: Commit version bump
        if: steps.version.outputs.skip != 'true'
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): v${{ steps.bump.outputs.new_version }}" || echo "No changes to commit"
      
      - name: Create git tag
        if: steps.version.outputs.skip != 'true'
        run: |
          git tag -a v${{ steps.bump.outputs.new_version }} -m "Release v${{ steps.bump.outputs.new_version }}"
      
      - name: Push changes
        if: steps.version.outputs.skip != 'true'
        run: |
          git push origin main --follow-tags
      
      - name: Publish to NPM
        if: steps.version.outputs.skip != 'true'
        run: |
          # Dry run first to check
          npm publish --dry-run
          
          # Actual publish
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        if: steps.version.outputs.skip != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          name: Release v${{ steps.bump.outputs.new_version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ steps.version.outputs.bump_type == 'prerelease' }}
          files: |
            dist/**/*.js
            dist/**/*.d.ts
            dist/**/*.map
      
      - name: Comment on PR (if applicable)
        if: steps.version.outputs.skip != 'true' && github.event.pull_request
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸŽ‰ Released in v${{ steps.bump.outputs.new_version }}\n\nInstall with:\n\`\`\`bash\nnpm install @ignis/forge@${{ steps.bump.outputs.new_version }}\n\`\`\``
            })

  publish-docs:
    name: Publish Documentation
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-20.x-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20.x-
      
      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Build Storybook
        run: npm run build-storybook
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          cname: forge.ignis.dev  # Optional: custom domain