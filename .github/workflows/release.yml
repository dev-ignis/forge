name: Release

on:
  workflow_run:
    workflows: ['CI']
    types: [completed]
    branches: [main]

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  security_audit_gate:
    name: Security Audit Gate (Critical)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node
        with:
          node-version: '22.x'

      - name: Audit runtime dependencies (gate)
        run: node scripts/security/audit-and-notify.mjs --scope=prod --ci-mode=release
        env:
          SECURITY_ALERT_LEVEL: ${{ vars.SECURITY_ALERT_LEVEL || 'critical' }}
          SECURITY_AUDIT_VERBOSE: ${{ vars.SECURITY_AUDIT_VERBOSE || 'false' }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DISCORD_WEBHOOK_CRITICAL: ${{ secrets.DISCORD_WEBHOOK_CRITICAL }}
          DISCORD_WEBHOOK_OPS: ${{ secrets.DISCORD_WEBHOOK_OPS }}

  release:
    name: Release
    runs-on: ubuntu-latest
    # Only run if CI workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: security_audit_gate
    outputs:
      published: ${{ steps.changesets.outputs.published }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node
        with:
          node-version: '20.x'

      - name: Configure npm registry
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Download build artifacts
        id: download-artifacts
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ci.yml
          workflow_conclusion: success
          name: build-${{ github.event.workflow_run.head_sha }}-20.x
          path: .
          github_token: ${{ github.token }}

      - name: Build packages if no cached artifacts
        if: steps.download-artifacts.outcome == 'failure'
        run: npm run build

      - name: Build workspace packages
        run: |
          echo "Building workspace packages for release..."
          npm run build --workspace=packages/forge-react
          npm run build --workspace=packages/forge-vue
          npm run build --workspace=packages/forge-angular
          npm run build --workspace=packages/forge-rhf
          echo "‚úÖ All workspace packages built successfully"

      - name: Preflight Checks for Release
        run: |
          echo "‚úÖ Running preflight checks before release..."
          if [ "${{ steps.download-artifacts.outcome }}" == "success" ]; then
            echo "‚úÖ Using cached build artifacts from CI"
          else
            echo "‚úÖ Built packages fresh (no PR artifacts available)"
          fi
          echo "‚úÖ Linting: PASSED (from CI)"
          echo "‚úÖ Type checking: PASSED (from CI)"
          echo "‚úÖ Tests: PASSED (from CI)"
          echo "‚úÖ Build: COMPLETE (main + workspace packages)"
          echo "üöÄ Ready for release!"

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          version: npx changeset version
          publish: npx changeset publish
          title: 'chore: release'
          commit: 'chore: release packages'
          setupGitUser: true
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ github.token }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  sync-develop:
    name: Sync Develop Branch
    runs-on: ubuntu-latest
    needs: release
    if: always() && needs.release.result == 'success'
    # Syncs main branch changes back to develop after successful release
    # This ensures develop stays up-to-date with published versions
    # Alternative: Use Changesets "Version Packages" PR workflow (future consideration)
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node
        with:
          node-version: '20.x'

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Sync develop with main
        run: |
          git checkout main
          git pull origin main
          git checkout develop
          git pull origin develop

          # Get the current version from main branch
          git checkout main
          MAIN_VERSION=$(node -p "require('./package.json').version")

          # Switch back to develop and update version
          git checkout develop

          # Update package.json version to match main
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$MAIN_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

          # Commit version sync if there are changes
          if ! git diff --quiet package.json; then
            git add package.json
            git commit -m "sync: update version to match main ($MAIN_VERSION)"
            git push origin develop
          fi

          # Try to merge main into develop
          if git merge main --no-ff -m "sync: merge main into develop"; then
            git push origin develop
            echo "‚úÖ Successfully synced develop with main"
          else
            echo "‚ùå Merge conflicts detected. Manual intervention required."
            git merge --abort
            exit 1
          fi

  update-examples:
    name: Update Demos
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.published == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'npm'

      - name: Update demo dependencies
        run: |
          # Update Next.js demo to use latest version
          cd demos/nextjs-app
          npm update @nexcraft/forge @nexcraft/forge-rhf

          # Update vanilla demo to use latest version
          cd ../vanilla-app
          npm update @nexcraft/forge

          # Commit changes if any
          cd ../..
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add demos/*/package*.json
          git diff --staged --quiet || git commit -m "chore: update demos to latest version"
          git push origin main || true
