name: Develop CI

on:
  push:
    branches: [develop]
    paths-ignore: ['docs/**', 'plans/**', '*.md', '.github/workflows/deploy.yml']
  pull_request:
    branches: [develop]
    paths-ignore: ['docs/**', 'plans/**', '*.md', '.github/workflows/deploy.yml']
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish beta version to npm'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # Comprehensive validation for PRs
  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Run linter
        run: npm run lint

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Build workspace packages
        run: |
          npm run build:types
          npm run build --workspace=packages/forge-react

      - name: Type check
        run: npm run type-check

  test:
    name: Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-develop
          path: coverage/
          retention-days: 3

  # Lightweight smoke test for pushes to develop or manual publish
  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.publish == true)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Quick build validation
        run: npm run build

      - name: Basic AI validation
        run: npm run validate:ai

  # Build job (runs after quality gates pass for PRs)
  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Build packages
        run: npm run build

      - name: Validate AI Manifest
        run: npm run validate:ai

  # Manual publish job (beta releases from develop)
  publish:
    name: Publish Beta
    runs-on: ubuntu-latest
    needs: [smoke-test]
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.publish == true }}
    environment: npm-publish
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Build packages
        run: npm run build

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish beta to npm
        run: |
          # Get current version and increment beta
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Check if already a prerelease, if not make it beta
          if [[ $CURRENT_VERSION == *"beta"* ]]; then
            # Increment existing beta
            npm version prerelease --preid=beta --no-git-tag-version
          else
            # Convert to beta prerelease
            npm version prerelease --preid=beta --no-git-tag-version
          fi
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Publishing version: $NEW_VERSION"
          
          # Update all workspace package versions to match
          npm version $NEW_VERSION --workspace=packages/forge-rhf --no-git-tag-version
          npm version $NEW_VERSION --workspace=packages/forge-react --no-git-tag-version
          npm version $NEW_VERSION --workspace=packages/forge-angular --no-git-tag-version
          npm version $NEW_VERSION --workspace=packages/forge-vue --no-git-tag-version
          npm version $NEW_VERSION --workspace=packages/forge-tokens --no-git-tag-version
          npm version $NEW_VERSION --workspace=packages/forge-mcp-figma --no-git-tag-version

          # Remove lockfile and reinstall with updated versions
          rm -f package-lock.json
          npm install

          # Rebuild packages with correct versions
          npm run build

          # Publish main package
          npm publish --tag beta --access public

          # Publish all workspace packages with legacy peer deps
          npm publish --workspace=packages/forge-rhf --tag beta --access public --legacy-peer-deps
          npm publish --workspace=packages/forge-react --tag beta --access public --legacy-peer-deps
          npm publish --workspace=packages/forge-angular --tag beta --access public --legacy-peer-deps
          npm publish --workspace=packages/forge-vue --tag beta --access public --legacy-peer-deps
          npm publish --workspace=packages/forge-tokens --tag beta --access public --legacy-peer-deps
          npm publish --workspace=packages/forge-mcp-figma --tag beta --access public --legacy-peer-deps
          
          echo "âœ… Published $NEW_VERSION to npm with beta tag"