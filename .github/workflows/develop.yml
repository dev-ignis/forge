name: Develop CI

on:
  push:
    branches: [develop]
    paths-ignore: ['docs/**', 'plans/**', '*.md', '.github/workflows/deploy.yml']
  pull_request:
    branches: [develop]
    paths-ignore: ['docs/**', 'plans/**', '*.md', '.github/workflows/deploy.yml']
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish beta version to npm'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # Comprehensive validation for PRs
  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Run linter
        run: npm run lint

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Build workspace packages
        run: |
          npm run build:types
          npm run build --workspace=packages/forge-react

      - name: Type check
        run: npm run type-check

  test:
    name: Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-develop
          path: coverage/
          retention-days: 3

  # Lightweight smoke test for pushes to develop or manual publish
  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.publish == true)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Quick build validation
        run: npm run build

      - name: Basic AI validation
        run: npm run validate:ai

  # Build job (runs after quality gates pass for PRs)
  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Build packages
        run: npm run build

      - name: Validate AI Manifest
        run: npm run validate:ai

  # Manual publish job (beta releases from develop)
  publish:
    name: Publish Beta
    runs-on: ubuntu-latest
    needs: [smoke-test]
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.publish == true }}
    environment: npm-publish
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node & Install
        uses: ./.github/actions/setup-node

      - name: Build packages
        run: npm run build

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish beta to npm
        run: |
          # Get current version and increment beta for main package
          echo "🔍 DEBUG: Starting beta publishing process..."
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Update peer dependency ranges to accept beta versions FIRST
          echo "Updating peer dependency ranges before version updates..."
          find packages -name "package.json" -exec sed -i 's/"@nexcraft\/forge": ">=0.7.1"/"@nexcraft\/forge": "*"/g' {} \;
          find packages -name "package.json" -exec sed -i 's/"@nexcraft\/forge-react": ">=0.1.0"/"@nexcraft\/forge-react": "*"/g' {} \;

          # Get the latest published version (including prereleases) from npm
          LATEST_NPM_VERSION=$(npm view @nexcraft/forge versions --json | jq -r '.[-1]' 2>/dev/null || echo "$CURRENT_VERSION")
          echo "Latest published version on npm: $LATEST_NPM_VERSION"

          # If the latest published version is newer than local, start from there
          if [[ "$LATEST_NPM_VERSION" != "$CURRENT_VERSION" ]]; then
            echo "Setting package version to latest published version: $LATEST_NPM_VERSION"
            npm version $LATEST_NPM_VERSION --no-git-tag-version
          fi

          # Now increment to next beta version
          npm version prerelease --preid=beta --no-git-tag-version

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Publishing main package version: $NEW_VERSION"

          # Function to check if a package has changes since last release
          has_changes() {
            local package_path=$1
            local package_name=$(node -p "require('$package_path/package.json').name")
            local current_version=$(node -p "require('$package_path/package.json').version")

            # Check if there are any changes in the package directory since last commit
            if git diff --quiet HEAD~1 HEAD -- "$package_path"; then
              echo "No changes detected for $package_name"
              return 1
            else
              echo "Changes detected for $package_name"
              return 0
            fi
          }

          # Remove lockfile and reinstall with updated peer dependencies
          rm -f package-lock.json
          npm install

          # Rebuild packages with correct versions
          npm run build

          # Publish main package
          echo "Publishing main package @nexcraft/forge@$NEW_VERSION"
          npm publish --tag beta --access public

          # Publish workspace packages with independent beta versioning
          for package_dir in packages/*/; do
            # Remove trailing slash for clean path
            package_dir=${package_dir%/}
            if [ -d "$package_dir" ] && [ -f "$package_dir/package.json" ]; then
              # Use absolute path to get package name
              package_json_path="$(pwd)/$package_dir/package.json"
              package_name=$(node -p "require('$package_json_path').name")

              # Skip if package is private
              if [ "$(node -p "require('$package_json_path').private || false")" = "true" ]; then
                echo "Skipping private package $package_name"
                continue
              fi

              # Get the latest published version from npm (source of truth)
              LATEST_PKG_VERSION=$(npm view $package_name versions --json | jq -r '.[-1]' 2>/dev/null)
              if [ "$LATEST_PKG_VERSION" = "null" ] || [ -z "$LATEST_PKG_VERSION" ]; then
                echo "Package $package_name not found on npm, skipping"
                continue
              fi

              echo "Processing workspace package $package_name (latest published: $LATEST_PKG_VERSION)"

              # Set package to latest published version (only if different)
              cd "$package_dir"
              CURRENT_LOCAL_VERSION=$(node -p "require('./package.json').version")
              if [[ "$LATEST_PKG_VERSION" != "$CURRENT_LOCAL_VERSION" ]]; then
                echo "Updating local version from $CURRENT_LOCAL_VERSION to $LATEST_PKG_VERSION"
                npm version $LATEST_PKG_VERSION --no-git-tag-version
              fi

              # Create beta version
              if [[ $LATEST_PKG_VERSION == *"beta"* ]]; then
                # Increment existing beta
                npm version prerelease --preid=beta --no-git-tag-version
              else
                # Create new beta prerelease
                npm version prerelease --preid=beta --no-git-tag-version
              fi

              # Get the new beta version
              NEW_PKG_VERSION=$(node -p "require('./package.json').version")
              echo "Publishing $package_name@$NEW_PKG_VERSION"

              # Publish the workspace package with beta tag
              npm publish --tag beta --access public

              cd - > /dev/null
            fi
          done

          echo "✅ Published main package $NEW_VERSION to npm with beta tag"
          echo "✅ Published all workspace packages with independent beta versions"