name: Sync Develop with Main

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-20.x-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20.x-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run basic checks
        run: |
          npm run lint
          npm run type-check
          npm run build

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Sync develop with main
        run: |
          git checkout main
          git pull origin main
          git checkout develop
          git pull origin develop
          
          # Get the current version from main branch
          git checkout main
          MAIN_VERSION=$(node -p "require('./package.json').version")
          
          # Switch back to develop and update version
          git checkout develop
          
          # Update package.json version to match main
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$MAIN_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          
          # Commit version sync if there are changes
          if ! git diff --quiet package.json; then
            git add package.json
            git commit -m "sync: update version to match main ($MAIN_VERSION)"
            git push origin develop
          fi
          
          # Try to merge main into develop
          if git merge main --no-ff -m "sync: merge main into develop"; then
            git push origin develop
            echo "✅ Successfully synced develop with main"
          else
            echo "❌ Merge conflicts detected. Manual intervention required."
            git merge --abort
            exit 1
          fi