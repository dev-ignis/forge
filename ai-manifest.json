{
  "manifestVersion": "1.0.0",
  "package": "@nexcraft/forge",
  "generatedAt": "2025-09-16T03:31:44.434Z",
  "components": [
    {
      "id": "forge-alert",
      "tag": "forge-alert",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "severity",
          "type": "AlertSeverity"
        },
        {
          "name": "variant",
          "type": "AlertVariant"
        },
        {
          "name": "title",
          "type": "string"
        },
        {
          "name": "message",
          "type": "string"
        },
        {
          "name": "closable",
          "type": "boolean"
        },
        {
          "name": "animateIn",
          "type": "boolean"
        },
        {
          "name": "autoDismiss",
          "type": "number"
        },
        {
          "name": "icon",
          "type": "string | undefined"
        },
        {
          "name": "semanticRole",
          "type": "string | undefined"
        },
        {
          "name": "aiContext",
          "type": "string | undefined"
        },
        {
          "name": "ariaDescription",
          "type": "string | null"
        },
        {
          "name": "maxRenderMs",
          "type": "number"
        },
        {
          "name": "warnOnViolation",
          "type": "boolean"
        },
        {
          "name": "performanceMode",
          "type": "'auto' | 'fast' | 'balanced' | 'quality'"
        },
        {
          "name": "devMode",
          "type": "boolean"
        },
        {
          "name": "showMetrics",
          "type": "boolean"
        },
        {
          "name": "closing",
          "type": "boolean"
        },
        {
          "name": "renderTime",
          "type": "number"
        },
        {
          "name": "renderCount",
          "type": "number"
        },
        {
          "name": "dismissTimer",
          "type": "number | undefined"
        },
        {
          "name": "iconMap",
          "type": "Record<AlertSeverity, string>"
        }
      ],
      "events": [
        {
          "name": "close",
          "description": "Fired when the alert is closed"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Default slot for alert content"
        },
        {
          "name": "actions",
          "description": "Action buttons or controls"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/alert.md",
        "source": "dist/components/alert/alert.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects",
          "actions": [
            {
              "name": "close",
              "description": "Close the alert",
              "availableCondition": "this.closable && !this.closing"
            },
            {
              "name": "focus",
              "description": "Focus the alert",
              "availableCondition": "true"
            },
            {
              "name": "acknowledge",
              "description": "Acknowledge the alert message",
              "availableCondition": "!this.closing"
            }
          ]
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}",
          "possibleStates": [
            "default",
            "closing",
            "auto-dismissing"
          ]
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-aspect-ratio",
      "tag": "forge-aspect-ratio",
      "category": "atom",
      "props": [
        {
          "name": "aiMetadata",
          "type": "object"
        },
        {
          "name": "styles"
        },
        {
          "name": "ratio",
          "type": "string"
        },
        {
          "name": "value",
          "type": "number"
        },
        {
          "name": "maxWidth",
          "type": "string"
        },
        {
          "name": "maxHeight",
          "type": "string"
        },
        {
          "name": "center",
          "type": "boolean"
        },
        {
          "name": "objectFit",
          "type": "'fill' | 'contain' | 'cover' | 'none' | 'scale-down'"
        },
        {
          "name": "aiState"
        }
      ],
      "events": [],
      "slots": [
        {
          "name": "default",
          "description": "Default slot for content with aspect ratio"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/aspect-ratio.md",
        "source": "dist/components/aspect-ratio/aspect-ratio.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects",
          "actions": [
            {
              "name": "setRatio",
              "description": "Set aspect ratio from width and height values",
              "availableCondition": "true"
            },
            {
              "name": "updateConstraints",
              "description": "Update maximum width and height constraints",
              "availableCondition": "true"
            },
            {
              "name": "getAspectRatio",
              "description": "Get the calculated aspect ratio value",
              "availableCondition": "true"
            }
          ]
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-avatar",
      "tag": "forge-avatar",
      "category": "atom",
      "props": [
        {
          "name": "aiMetadata",
          "type": "AIMetadata"
        },
        {
          "name": "styles"
        },
        {
          "name": "src",
          "type": "string | undefined"
        },
        {
          "name": "alt",
          "type": "string | undefined"
        },
        {
          "name": "fallback",
          "type": "string | undefined"
        },
        {
          "name": "size",
          "type": "AvatarSize"
        },
        {
          "name": "status",
          "type": "AvatarStatus"
        },
        {
          "name": "statusPosition",
          "type": "StatusPosition"
        },
        {
          "name": "shape",
          "type": "AvatarShape"
        },
        {
          "name": "clickable",
          "type": "boolean"
        },
        {
          "name": "loading",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "imageLoaded",
          "type": "boolean"
        },
        {
          "name": "imageError",
          "type": "boolean"
        },
        {
          "name": "_handleImageLoad"
        },
        {
          "name": "_handleImageError"
        },
        {
          "name": "_handleClick"
        },
        {
          "name": "_handleKeyDown"
        }
      ],
      "events": [
        {
          "name": "forge-avatar-click",
          "description": "Fired when a clickable avatar is clicked"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/avatar.md",
        "source": "dist/components/avatar/avatar.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-badge",
      "tag": "forge-badge",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "variant",
          "type": "BadgeVariant"
        },
        {
          "name": "size",
          "type": "BadgeSize"
        },
        {
          "name": "position",
          "type": "BadgePosition"
        },
        {
          "name": "count",
          "type": "number"
        },
        {
          "name": "maxCount",
          "type": "number"
        },
        {
          "name": "dot",
          "type": "boolean"
        },
        {
          "name": "outlined",
          "type": "boolean"
        },
        {
          "name": "pulse",
          "type": "boolean"
        },
        {
          "name": "invisible",
          "type": "boolean"
        },
        {
          "name": "content",
          "type": "string"
        },
        {
          "name": "semanticRole",
          "type": "string | undefined"
        },
        {
          "name": "aiContext",
          "type": "string | undefined"
        },
        {
          "name": "ariaDescription",
          "type": "string | null"
        },
        {
          "name": "maxRenderMs",
          "type": "number"
        },
        {
          "name": "warnOnViolation",
          "type": "boolean"
        },
        {
          "name": "performanceMode",
          "type": "'auto' | 'fast' | 'balanced' | 'quality'"
        },
        {
          "name": "devMode",
          "type": "boolean"
        },
        {
          "name": "showMetrics",
          "type": "boolean"
        },
        {
          "name": "renderTime",
          "type": "number"
        },
        {
          "name": "renderCount",
          "type": "number"
        },
        {
          "name": "previousCount",
          "type": "number"
        }
      ],
      "events": [],
      "slots": [
        {
          "name": "default",
          "description": "Default slot for badge content (if not using count)"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/badge.md",
        "source": "dist/components/badge/badge.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects",
          "actions": [
            {
              "name": "show",
              "description": "Show the badge",
              "availableCondition": "this.invisible"
            },
            {
              "name": "hide",
              "description": "Hide the badge",
              "availableCondition": "!this.invisible"
            },
            {
              "name": "increment",
              "description": "Increment the count",
              "availableCondition": "!this.dot && this.count < 999"
            },
            {
              "name": "decrement",
              "description": "Decrement the count",
              "availableCondition": "!this.dot && this.count > 0"
            },
            {
              "name": "reset",
              "description": "Reset count to zero and show badge",
              "availableCondition": "this.count > 0 || this.invisible"
            },
            {
              "name": "focus",
              "description": "Focus the badge",
              "availableCondition": "true"
            }
          ]
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}",
          "possibleStates": [
            "visible",
            "hidden",
            "dot-indicator",
            "counting",
            "pulsing"
          ]
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-button",
      "tag": "forge-button",
      "category": "atom",
      "props": [
        {
          "name": "aiMetadata",
          "type": "AIComponentMetadata"
        },
        {
          "name": "styles"
        },
        {
          "name": "variant",
          "type": "ButtonVariant"
        },
        {
          "name": "size",
          "type": "ButtonSize"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "loading",
          "type": "boolean"
        },
        {
          "name": "type",
          "type": "ButtonType"
        },
        {
          "name": "fullWidth",
          "type": "boolean"
        },
        {
          "name": "iconStart",
          "type": "string | undefined"
        },
        {
          "name": "iconEnd",
          "type": "string | undefined"
        },
        {
          "name": "ariaLabel",
          "type": "string | null"
        },
        {
          "name": "ariaControls",
          "type": "string | null"
        },
        {
          "name": "ariaExpanded",
          "type": "string | null"
        },
        {
          "name": "ariaCurrent",
          "type": "string | null"
        },
        {
          "name": "ariaSelected",
          "type": "string | null"
        },
        {
          "name": "role",
          "type": "string | null"
        },
        {
          "name": "tabIndex",
          "type": "number"
        },
        {
          "name": "ripples",
          "type": "Array<{ x: number; y: number; id: number }>"
        },
        {
          "name": "renderMetrics",
          "type": "object"
        }
      ],
      "events": [],
      "slots": [
        {
          "name": "default",
          "description": "Default slot for button text and content"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/button.md",
        "source": "dist/components/button/button.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-checkbox",
      "tag": "forge-checkbox",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "checked",
          "type": "boolean"
        },
        {
          "name": "indeterminate",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "required",
          "type": "boolean"
        },
        {
          "name": "error",
          "type": "boolean"
        },
        {
          "name": "name",
          "type": "string | undefined"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "label",
          "type": "string"
        },
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "size",
          "type": "CheckboxSize"
        },
        {
          "name": "variant",
          "type": "CheckboxVariant"
        },
        {
          "name": "labelPosition",
          "type": "CheckboxLabelPosition"
        },
        {
          "name": "semanticRole",
          "type": "string | undefined"
        },
        {
          "name": "aiContext",
          "type": "string | undefined"
        },
        {
          "name": "ariaDescription",
          "type": "string | null"
        },
        {
          "name": "maxRenderMs",
          "type": "number"
        },
        {
          "name": "warnOnViolation",
          "type": "boolean"
        },
        {
          "name": "performanceMode",
          "type": "'auto' | 'fast' | 'balanced' | 'quality'"
        },
        {
          "name": "devMode",
          "type": "boolean"
        },
        {
          "name": "showMetrics",
          "type": "boolean"
        },
        {
          "name": "input",
          "type": "HTMLInputElement"
        },
        {
          "name": "renderTime",
          "type": "number"
        },
        {
          "name": "renderCount",
          "type": "number"
        }
      ],
      "events": [],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/checkbox.md",
        "source": "dist/components/checkbox/checkbox.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects",
          "actions": [
            {
              "name": "toggle",
              "description": "Toggle checked state",
              "availableCondition": "!this.disabled && !this.indeterminate"
            },
            {
              "name": "check",
              "description": "Set to checked",
              "availableCondition": "!this.disabled && !this.checked"
            },
            {
              "name": "uncheck",
              "description": "Set to unchecked",
              "availableCondition": "!this.disabled && this.checked"
            },
            {
              "name": "setIndeterminate",
              "description": "Set to indeterminate state",
              "availableCondition": "!this.disabled && !this.indeterminate"
            },
            {
              "name": "reset",
              "description": "Reset to default state",
              "availableCondition": "this.checked || this.indeterminate || this.error"
            },
            {
              "name": "focus",
              "description": "Focus the checkbox",
              "availableCondition": "!this.disabled"
            },
            {
              "name": "validate",
              "description": "Validate required state",
              "availableCondition": "this.required"
            }
          ]
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}",
          "possibleStates": [
            "unchecked",
            "checked",
            "indeterminate",
            "disabled",
            "error"
          ]
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-icon",
      "tag": "forge-icon",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "iconRegistry"
        },
        {
          "name": "loadingIcons"
        },
        {
          "name": "name",
          "type": "string | undefined"
        },
        {
          "name": "src",
          "type": "string | undefined"
        },
        {
          "name": "size",
          "type": "IconSize"
        },
        {
          "name": "spin",
          "type": "boolean"
        },
        {
          "name": "pulse",
          "type": "boolean"
        },
        {
          "name": "label",
          "type": "string | undefined"
        },
        {
          "name": "semanticRole",
          "type": "string | undefined"
        },
        {
          "name": "aiContext",
          "type": "string | undefined"
        },
        {
          "name": "ariaDescription",
          "type": "string | null"
        },
        {
          "name": "maxRenderMs",
          "type": "number"
        },
        {
          "name": "warnOnViolation",
          "type": "boolean"
        },
        {
          "name": "performanceMode",
          "type": "'auto' | 'fast' | 'balanced' | 'quality'"
        },
        {
          "name": "devMode",
          "type": "boolean"
        },
        {
          "name": "showMetrics",
          "type": "boolean"
        },
        {
          "name": "iconData",
          "type": "IconData | undefined"
        },
        {
          "name": "loading",
          "type": "boolean"
        },
        {
          "name": "error",
          "type": "boolean"
        },
        {
          "name": "renderTime",
          "type": "number"
        },
        {
          "name": "renderCount",
          "type": "number"
        }
      ],
      "events": [],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/icon.md",
        "source": "dist/components/icon/icon.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects",
          "actions": [
            {
              "name": "reload",
              "description": "Reload icon from source",
              "availableCondition": "this.error && (!!this.name || !!this.src)"
            },
            {
              "name": "clearCache",
              "description": "Clear icon from cache",
              "availableCondition": "!!this.name && ForgeIcon.iconRegistry.has(this.name)"
            },
            {
              "name": "startSpin",
              "description": "Start spinning animation",
              "availableCondition": "!this.spin && !this.loading"
            },
            {
              "name": "stopSpin",
              "description": "Stop spinning animation",
              "availableCondition": "this.spin"
            },
            {
              "name": "startPulse",
              "description": "Start pulse animation",
              "availableCondition": "!this.pulse && !this.loading"
            },
            {
              "name": "stopPulse",
              "description": "Stop pulse animation",
              "availableCondition": "this.pulse"
            },
            {
              "name": "focus",
              "description": "Focus the icon",
              "availableCondition": "true"
            }
          ]
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}",
          "possibleStates": [
            "idle",
            "loading",
            "loaded",
            "error",
            "spinning",
            "pulsing"
          ]
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-input",
      "tag": "forge-input",
      "category": "atom",
      "props": [
        {
          "name": "aiMetadata",
          "type": "object"
        },
        {
          "name": "styles"
        },
        {
          "name": "type",
          "type": "InputType"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "placeholder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "label",
          "type": "string"
        },
        {
          "name": "helperText",
          "type": "string"
        },
        {
          "name": "variant",
          "type": "InputVariant"
        },
        {
          "name": "size",
          "type": "InputSize"
        },
        {
          "name": "validationState",
          "type": "ValidationState"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "readonly",
          "type": "boolean"
        },
        {
          "name": "required",
          "type": "boolean"
        },
        {
          "name": "clearable",
          "type": "boolean"
        },
        {
          "name": "pattern",
          "type": "string | undefined"
        },
        {
          "name": "minLength",
          "type": "number | undefined"
        },
        {
          "name": "maxLength",
          "type": "number | undefined"
        },
        {
          "name": "min",
          "type": "number | undefined"
        },
        {
          "name": "max",
          "type": "number | undefined"
        },
        {
          "name": "step",
          "type": "number | undefined"
        },
        {
          "name": "autocomplete",
          "type": "string | undefined"
        },
        {
          "name": "inputmode",
          "type": "string | undefined"
        },
        {
          "name": "hasFocus",
          "type": "boolean"
        },
        {
          "name": "renderMetrics",
          "type": "object"
        },
        {
          "name": "inputElement",
          "type": "HTMLInputElement"
        }
      ],
      "events": [],
      "slots": [
        {
          "name": "prefix",
          "description": "Content to display before the input (icons, text)"
        },
        {
          "name": "suffix",
          "description": "Content to display after the input (icons, buttons)"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/input.md",
        "source": "dist/components/input/input.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-progress-circle",
      "tag": "forge-progress-circle",
      "category": "atom",
      "props": [
        {
          "name": "aiMetadata",
          "type": "object"
        },
        {
          "name": "styles"
        },
        {
          "name": "value",
          "type": "number"
        },
        {
          "name": "max",
          "type": "number"
        },
        {
          "name": "variant",
          "type": "'primary' | 'secondary' | 'success' | 'warning' | 'danger'"
        },
        {
          "name": "size",
          "type": "'small' | 'medium' | 'large'"
        },
        {
          "name": "strokeWidth",
          "type": "number | undefined"
        },
        {
          "name": "showLabel",
          "type": "boolean"
        },
        {
          "name": "hideLabel",
          "type": "boolean"
        },
        {
          "name": "indeterminate",
          "type": "boolean"
        },
        {
          "name": "ariaLabel",
          "type": "string"
        },
        {
          "name": "radius",
          "type": "number"
        },
        {
          "name": "circumference"
        },
        {
          "name": "aiState"
        }
      ],
      "events": [],
      "slots": [
        {
          "name": "default",
          "description": "The text content displayed in the center of the circle"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/progress-circle.md",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-progress",
      "tag": "forge-progress",
      "category": "atom",
      "props": [
        {
          "name": "aiMetadata",
          "type": "object"
        },
        {
          "name": "styles"
        },
        {
          "name": "value",
          "type": "number"
        },
        {
          "name": "max",
          "type": "number"
        },
        {
          "name": "variant",
          "type": "'primary' | 'secondary' | 'success' | 'warning' | 'danger'"
        },
        {
          "name": "size",
          "type": "'small' | 'medium' | 'large'"
        },
        {
          "name": "indeterminate",
          "type": "boolean"
        },
        {
          "name": "ariaLabel",
          "type": "string"
        },
        {
          "name": "aiState"
        }
      ],
      "events": [],
      "slots": [
        {
          "name": "default",
          "description": "The text content displayed alongside the progress bar"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/progress.md",
        "source": "dist/components/progress/progress.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects",
          "actions": [
            {
              "name": "updateProgress",
              "description": "Update the progress value",
              "availableCondition": "!this.indeterminate"
            },
            {
              "name": "setIndeterminate",
              "description": "Switch to indeterminate loading state",
              "availableCondition": "!this.indeterminate"
            },
            {
              "name": "setDeterminate",
              "description": "Switch to determinate progress state",
              "availableCondition": "this.indeterminate"
            }
          ]
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}",
          "possibleStates": [
            "indeterminate",
            "not-started",
            "complete",
            "in-progress"
          ]
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-radio-group",
      "tag": "forge-radio-group",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string | undefined"
        },
        {
          "name": "label",
          "type": "string"
        },
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "options",
          "type": "RadioOption[]"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "required",
          "type": "boolean"
        },
        {
          "name": "error",
          "type": "boolean"
        },
        {
          "name": "errorMessage",
          "type": "string"
        },
        {
          "name": "orientation",
          "type": "RadioOrientation"
        },
        {
          "name": "labelPosition",
          "type": "RadioLabelPosition"
        },
        {
          "name": "size",
          "type": "RadioSize"
        },
        {
          "name": "focusedIndex",
          "type": "number"
        },
        {
          "name": "radioGroup",
          "type": "HTMLElement"
        },
        {
          "name": "groupId"
        },
        {
          "name": "aiMetadata",
          "type": "object"
        }
      ],
      "events": [],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/radio-group.md",
        "source": "dist/components/radio-group/radio-group.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects",
          "actions": [
            {
              "name": "selectOption",
              "description": "Select a specific radio option",
              "availableCondition": "!this.disabled && this.options.some(opt => !opt.disabled)"
            },
            {
              "name": "reset",
              "description": "Clear the selection",
              "availableCondition": "true"
            },
            {
              "name": "validate",
              "description": "Validate the current selection",
              "availableCondition": "true"
            }
          ]
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-select",
      "tag": "forge-select",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string | undefined"
        },
        {
          "name": "label",
          "type": "string"
        },
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "placeholder",
          "type": "string"
        },
        {
          "name": "options",
          "type": "SelectOption[]"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "required",
          "type": "boolean"
        },
        {
          "name": "error",
          "type": "boolean"
        },
        {
          "name": "errorMessage",
          "type": "string"
        },
        {
          "name": "searchable",
          "type": "boolean"
        },
        {
          "name": "loading",
          "type": "boolean"
        },
        {
          "name": "open",
          "type": "boolean"
        },
        {
          "name": "size",
          "type": "SelectSize"
        },
        {
          "name": "variant",
          "type": "SelectVariant"
        },
        {
          "name": "searchQuery",
          "type": "string"
        },
        {
          "name": "focusedIndex",
          "type": "number"
        },
        {
          "name": "filteredOptions",
          "type": "SelectOption[]"
        },
        {
          "name": "trigger",
          "type": "HTMLButtonElement"
        },
        {
          "name": "dropdown",
          "type": "HTMLElement"
        },
        {
          "name": "searchInput",
          "type": "HTMLInputElement | undefined"
        },
        {
          "name": "handleTriggerClick"
        },
        {
          "name": "handleKeyDown"
        },
        {
          "name": "handleSearch"
        },
        {
          "name": "renderSelectOptions"
        },
        {
          "name": "aiMetadata",
          "type": "object"
        }
      ],
      "events": [],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/molecules/multi-select.md",
        "source": "dist/components/select/select.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects",
          "actions": [
            {
              "name": "openDropdown",
              "description": "Open the dropdown menu",
              "availableCondition": "!this.disabled && !this.loading && !this.open"
            },
            {
              "name": "close",
              "description": "Close the dropdown menu",
              "availableCondition": "this.open"
            },
            {
              "name": "selectOption",
              "description": "Select a specific option",
              "availableCondition": "!this.disabled && !this.loading"
            },
            {
              "name": "reset",
              "description": "Clear the selection",
              "availableCondition": "true"
            },
            {
              "name": "validate",
              "description": "Validate the current selection",
              "availableCondition": "true"
            }
          ]
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-skeleton",
      "tag": "forge-skeleton",
      "category": "atom",
      "props": [
        {
          "name": "aiMetadata",
          "type": "object"
        },
        {
          "name": "styles"
        },
        {
          "name": "width",
          "type": "string"
        },
        {
          "name": "height",
          "type": "string"
        },
        {
          "name": "shape",
          "type": "'rounded' | 'square' | 'circle'"
        },
        {
          "name": "size",
          "type": "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
        },
        {
          "name": "noAnimation",
          "type": "boolean"
        },
        {
          "name": "ariaLabel",
          "type": "string"
        },
        {
          "name": "aiState"
        }
      ],
      "events": [],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/skeleton.md",
        "source": "dist/components/skeleton/skeleton.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects",
          "actions": [
            {
              "name": "toggleAnimation",
              "description": "Toggle shimmer animation on/off",
              "availableCondition": "true"
            },
            {
              "name": "updateDimensions",
              "description": "Update skeleton width and height",
              "availableCondition": "true"
            }
          ]
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}",
          "possibleStates": [
            "static",
            "animated"
          ]
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-switch",
      "tag": "forge-switch",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "checked",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "loading",
          "type": "boolean"
        },
        {
          "name": "required",
          "type": "boolean"
        },
        {
          "name": "error",
          "type": "boolean"
        },
        {
          "name": "name",
          "type": "string | undefined"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "label",
          "type": "string"
        },
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "onLabel",
          "type": "string"
        },
        {
          "name": "offLabel",
          "type": "string"
        },
        {
          "name": "size",
          "type": "SwitchSize"
        },
        {
          "name": "labelPosition",
          "type": "SwitchLabelPosition"
        },
        {
          "name": "input",
          "type": "HTMLInputElement"
        },
        {
          "name": "aiMetadata",
          "type": "object"
        }
      ],
      "events": [],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/atoms/switch.md",
        "source": "dist/components/switch/switch.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects",
          "actions": [
            {
              "name": "toggle",
              "description": "Toggle the switch on/off",
              "availableCondition": "!this.disabled && !this.loading"
            },
            {
              "name": "reset",
              "description": "Reset switch to off state",
              "availableCondition": "true"
            }
          ]
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-card",
      "tag": "forge-card",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "variant",
          "type": "CardVariant"
        },
        {
          "name": "size",
          "type": "CardSize"
        },
        {
          "name": "elevation",
          "type": "number"
        },
        {
          "name": "clickable",
          "type": "boolean"
        },
        {
          "name": "selected",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "loading",
          "type": "boolean"
        },
        {
          "name": "title",
          "type": "string"
        },
        {
          "name": "subtitle",
          "type": "string"
        },
        {
          "name": "mediaAspect",
          "type": "string"
        },
        {
          "name": "noHeaderBorder",
          "type": "boolean"
        },
        {
          "name": "noFooterBorder",
          "type": "boolean"
        },
        {
          "name": "ariaLabel",
          "type": "string | null"
        },
        {
          "name": "hasMedia",
          "type": "boolean"
        },
        {
          "name": "hasHeader",
          "type": "boolean"
        },
        {
          "name": "hasFooter",
          "type": "boolean"
        },
        {
          "name": "hasActions",
          "type": "boolean"
        },
        {
          "name": "aiMetadata",
          "type": "AIMetadata"
        }
      ],
      "events": [],
      "slots": [
        {
          "name": "media",
          "description": "Media content like images, videos, or graphics"
        },
        {
          "name": "header",
          "description": "Custom header content (overrides title/subtitle)"
        },
        {
          "name": "default",
          "description": "Default slot for main card content"
        },
        {
          "name": "footer",
          "description": "Footer content like metadata or links"
        },
        {
          "name": "actions",
          "description": "Action buttons or controls"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/molecules/card.md",
        "source": "dist/components/card/card.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-date-picker",
      "tag": "forge-date-picker",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "_value",
          "type": "Date | null"
        },
        {
          "name": "value",
          "type": "Date | null"
        },
        {
          "name": "_range",
          "type": "DateRange | null"
        },
        {
          "name": "range",
          "type": "DateRange | null"
        },
        {
          "name": "placeholder",
          "type": "string"
        },
        {
          "name": "format",
          "type": "string"
        },
        {
          "name": "locale",
          "type": "string"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "required",
          "type": "boolean"
        },
        {
          "name": "readonly",
          "type": "boolean"
        },
        {
          "name": "rangeMode",
          "type": "boolean"
        },
        {
          "name": "clearButton",
          "type": "boolean"
        },
        {
          "name": "min",
          "type": "Date | null"
        },
        {
          "name": "max",
          "type": "Date | null"
        },
        {
          "name": "disabledDates",
          "type": "Date[]"
        },
        {
          "name": "weekStartMonday",
          "type": "boolean"
        },
        {
          "name": "isOpen",
          "type": "boolean"
        },
        {
          "name": "currentMonth",
          "type": "number"
        },
        {
          "name": "currentYear",
          "type": "number"
        },
        {
          "name": "hoverDate",
          "type": "Date | null"
        },
        {
          "name": "rangeStart",
          "type": "Date | null"
        },
        {
          "name": "rangeEnd",
          "type": "Date | null"
        },
        {
          "name": "selectingRangeEnd",
          "type": "boolean"
        },
        {
          "name": "aiMetadata",
          "type": "AIMetadata"
        },
        {
          "name": "monthNames",
          "type": "array"
        },
        {
          "name": "weekdayNames",
          "type": "array"
        },
        {
          "name": "handleDocumentClick"
        },
        {
          "name": "handleKeydown"
        },
        {
          "name": "handleInputChange"
        }
      ],
      "events": [],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/molecules/date-picker.md",
        "source": "dist/components/date-picker/date-picker.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-dropdown",
      "tag": "forge-dropdown",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "items",
          "type": "DropdownItem[]"
        },
        {
          "name": "label",
          "type": "string"
        },
        {
          "name": "position",
          "type": "DropdownPosition"
        },
        {
          "name": "variant",
          "type": "DropdownVariant"
        },
        {
          "name": "size",
          "type": "DropdownSize"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "closeOnSelect",
          "type": "boolean"
        },
        {
          "name": "multiSelect",
          "type": "boolean"
        },
        {
          "name": "icon",
          "type": "string"
        },
        {
          "name": "placeholder",
          "type": "string"
        },
        {
          "name": "isOpen",
          "type": "boolean"
        },
        {
          "name": "selectedItems",
          "type": "Set<string>"
        },
        {
          "name": "focusedIndex",
          "type": "number"
        },
        {
          "name": "actualPosition",
          "type": "DropdownPosition"
        },
        {
          "name": "groups",
          "type": "Map<string, DropdownItem[]>"
        },
        {
          "name": "aiMetadata",
          "type": "AIMetadata"
        }
      ],
      "events": [],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/molecules/dropdown.md",
        "source": "dist/components/dropdown/dropdown.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-form-field",
      "tag": "forge-form-field",
      "category": "atom",
      "props": [
        {
          "name": "aiMetadata",
          "type": "object"
        },
        {
          "name": "styles"
        },
        {
          "name": "label",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "placeholder",
          "type": "string"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "variant",
          "type": "FormFieldVariant"
        },
        {
          "name": "validationState",
          "type": "FormFieldValidationState"
        },
        {
          "name": "errorMessage",
          "type": "string"
        },
        {
          "name": "warningMessage",
          "type": "string"
        },
        {
          "name": "successMessage",
          "type": "string"
        },
        {
          "name": "helpText",
          "type": "string"
        },
        {
          "name": "required",
          "type": "boolean"
        },
        {
          "name": "showOptional",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "readonly",
          "type": "boolean"
        },
        {
          "name": "pattern",
          "type": "string | undefined"
        },
        {
          "name": "minLength",
          "type": "number | undefined"
        },
        {
          "name": "maxLength",
          "type": "number | undefined"
        },
        {
          "name": "min",
          "type": "string | undefined"
        },
        {
          "name": "max",
          "type": "string | undefined"
        },
        {
          "name": "isFocused",
          "type": "boolean"
        },
        {
          "name": "isFilled",
          "type": "boolean"
        },
        {
          "name": "renderMetrics",
          "type": "object"
        },
        {
          "name": "inputElement",
          "type": "ForgeInput | undefined"
        }
      ],
      "events": [],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/molecules/form-field.md",
        "source": "dist/components/form-field/form-field.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-modal",
      "tag": "forge-modal",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "open",
          "type": "boolean"
        },
        {
          "name": "size",
          "type": "ModalSize"
        },
        {
          "name": "title",
          "type": "string"
        },
        {
          "name": "showClose",
          "type": "boolean"
        },
        {
          "name": "closeOnBackdrop",
          "type": "boolean"
        },
        {
          "name": "closeOnEscape",
          "type": "boolean"
        },
        {
          "name": "noHeaderBorder",
          "type": "boolean"
        },
        {
          "name": "noFooterBorder",
          "type": "boolean"
        },
        {
          "name": "scrollBehavior",
          "type": "ModalScrollBehavior"
        },
        {
          "name": "preventBodyScroll",
          "type": "boolean"
        },
        {
          "name": "animation",
          "type": "'none' | 'fade' | 'slide'"
        },
        {
          "name": "stackLevel",
          "type": "number"
        },
        {
          "name": "ariaLabel",
          "type": "string | null"
        },
        {
          "name": "hasFooter",
          "type": "boolean"
        },
        {
          "name": "focusedElementBeforeOpen",
          "type": "HTMLElement | null"
        },
        {
          "name": "modalElement",
          "type": "HTMLElement"
        },
        {
          "name": "bodyElement",
          "type": "HTMLElement"
        },
        {
          "name": "focusableElements",
          "type": "HTMLElement[]"
        },
        {
          "name": "firstFocusableElement",
          "type": "HTMLElement | null"
        },
        {
          "name": "lastFocusableElement",
          "type": "HTMLElement | null"
        },
        {
          "name": "aiMetadata",
          "type": "AIMetadata"
        }
      ],
      "events": [
        {
          "name": "modalopen",
          "description": "Fired when the modal is opened"
        },
        {
          "name": "modalclose",
          "description": "Fired when the modal is closed"
        }
      ],
      "slots": [
        {
          "name": "header",
          "description": "Custom header content (overrides title prop)"
        },
        {
          "name": "default",
          "description": "Default slot for main modal content"
        },
        {
          "name": "footer",
          "description": "Footer content like action buttons"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/molecules/modal.md",
        "source": "dist/components/modal/modal.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-multi-select",
      "tag": "forge-multi-select",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "options",
          "type": "MultiSelectOption[]"
        },
        {
          "name": "value",
          "type": "string[]"
        },
        {
          "name": "placeholder",
          "type": "string"
        },
        {
          "name": "searchPlaceholder",
          "type": "string"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "showSearch",
          "type": "boolean"
        },
        {
          "name": "showActions",
          "type": "boolean"
        },
        {
          "name": "maxSelections"
        },
        {
          "name": "groupBy",
          "type": "boolean"
        },
        {
          "name": "noResultsText",
          "type": "string"
        },
        {
          "name": "isOpen",
          "type": "boolean"
        },
        {
          "name": "searchQuery",
          "type": "string"
        },
        {
          "name": "filteredOptions",
          "type": "MultiSelectOption[]"
        },
        {
          "name": "focusedOptionIndex",
          "type": "number"
        },
        {
          "name": "liveRegion",
          "type": "HTMLDivElement | undefined"
        },
        {
          "name": "aiMetadata",
          "type": "AIMetadata"
        },
        {
          "name": "toggleDropdown"
        },
        {
          "name": "handleDocumentClick"
        },
        {
          "name": "handleKeydown"
        }
      ],
      "events": [
        {
          "name": "change",
          "description": "change event",
          "detail": "CustomEvent"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/molecules/multi-select.md",
        "source": "dist/components/multi-select/multi-select.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-toast-container",
      "tag": "forge-toast-container",
      "category": "atom",
      "props": [
        {
          "name": "aiMetadata",
          "type": "object"
        },
        {
          "name": "styles"
        },
        {
          "name": "position",
          "type": "'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right'"
        },
        {
          "name": "maxToasts",
          "type": "number"
        },
        {
          "name": "stackNewest",
          "type": "boolean"
        },
        {
          "name": "toasts",
          "type": "ForgeToast[]"
        },
        {
          "name": "toastQueue",
          "type": "Array<{\r\n    id: string;\r\n    title?: string;\r\n    message: string;\r\n    variant?: 'info' | 'success' | 'warning' | 'error';\r\n    duration?: number;\r\n    dismissible?: boolean;\r\n    persistent?: boolean;\r\n    showProgress?: boolean;\r\n  }>"
        },
        {
          "name": "aiState"
        }
      ],
      "events": [],
      "a11y": {},
      "examples": {
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-toast",
      "tag": "forge-toast",
      "category": "atom",
      "props": [
        {
          "name": "aiMetadata",
          "type": "object"
        },
        {
          "name": "styles"
        },
        {
          "name": "title",
          "type": "string"
        },
        {
          "name": "message",
          "type": "string"
        },
        {
          "name": "variant",
          "type": "'info' | 'success' | 'warning' | 'error'"
        },
        {
          "name": "duration",
          "type": "number"
        },
        {
          "name": "dismissible",
          "type": "boolean"
        },
        {
          "name": "showProgress",
          "type": "boolean"
        },
        {
          "name": "persistent",
          "type": "boolean"
        },
        {
          "name": "toastId",
          "type": "string"
        },
        {
          "name": "isVisible",
          "type": "boolean"
        },
        {
          "name": "progressWidth",
          "type": "number"
        },
        {
          "name": "dismissTimer",
          "type": "number | undefined"
        },
        {
          "name": "progressTimer",
          "type": "number | undefined"
        },
        {
          "name": "animationEndHandler",
          "type": "(event: AnimationEvent) => void | undefined"
        },
        {
          "name": "aiState"
        }
      ],
      "events": [
        {
          "name": "toast-dismissed",
          "description": "toast-dismissed event",
          "detail": "CustomEvent"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Default content for the toast message"
        },
        {
          "name": "icon",
          "description": "Icon slot for custom toast icons"
        },
        {
          "name": "action",
          "description": "Action button slot"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/molecules/toast.md",
        "source": "dist/components/toast/toast.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}",
          "possibleStates": [
            "dismissed",
            "persistent",
            "timed",
            "manual"
          ]
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-tooltip",
      "tag": "forge-tooltip",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "content",
          "type": "string"
        },
        {
          "name": "position",
          "type": "TooltipPosition"
        },
        {
          "name": "trigger",
          "type": "TooltipTrigger"
        },
        {
          "name": "variant",
          "type": "TooltipVariant"
        },
        {
          "name": "showDelay",
          "type": "number"
        },
        {
          "name": "hideDelay",
          "type": "number"
        },
        {
          "name": "showArrow",
          "type": "boolean"
        },
        {
          "name": "maxWidth",
          "type": "string"
        },
        {
          "name": "htmlContent",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "isVisible",
          "type": "boolean"
        },
        {
          "name": "actualPosition",
          "type": "TooltipPosition"
        },
        {
          "name": "showTimeout",
          "type": "number | undefined"
        },
        {
          "name": "hideTimeout",
          "type": "number | undefined"
        },
        {
          "name": "aiMetadata",
          "type": "AIMetadata"
        }
      ],
      "events": [
        {
          "name": "tooltipvisibilitychange",
          "description": "tooltipvisibilitychange event",
          "detail": "CustomEvent"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Default slot for tooltip content"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/molecules/tooltip.md",
        "source": "dist/components/tooltip/tooltip.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-accordion",
      "tag": "forge-accordion",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "panels",
          "type": "AccordionPanel[]"
        },
        {
          "name": "multiple",
          "type": "boolean"
        },
        {
          "name": "expandedPanels",
          "type": "string[]"
        },
        {
          "name": "aiState",
          "type": "AIComponentState"
        }
      ],
      "events": [
        {
          "name": "paneltoggle",
          "description": "When a panel is expanded or collapsed",
          "detail": "CustomEvent"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/organisms/accordion.md",
        "source": "dist/components/accordion/accordion.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-data-grid",
      "tag": "forge-data-grid",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "columns",
          "type": "GridColumn[]"
        },
        {
          "name": "data",
          "type": "GridData[]"
        },
        {
          "name": "loading",
          "type": "boolean"
        },
        {
          "name": "sortable",
          "type": "boolean"
        },
        {
          "name": "filterable",
          "type": "boolean"
        },
        {
          "name": "selectable",
          "type": "boolean"
        },
        {
          "name": "selectionType",
          "type": "'none' | 'single' | 'multiple'"
        },
        {
          "name": "editable",
          "type": "boolean"
        },
        {
          "name": "expandable",
          "type": "boolean"
        },
        {
          "name": "virtualScrolling",
          "type": "boolean"
        },
        {
          "name": "rowHeight",
          "type": "number"
        },
        {
          "name": "showToolbar",
          "type": "boolean"
        },
        {
          "name": "showSearch",
          "type": "boolean"
        },
        {
          "name": "searchPlaceholder",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "number"
        },
        {
          "name": "paginated",
          "type": "boolean"
        },
        {
          "name": "selection",
          "type": "GridSelection"
        },
        {
          "name": "sortState",
          "type": "GridSort[]"
        },
        {
          "name": "filterState",
          "type": "GridFilter[]"
        },
        {
          "name": "editingCell",
          "type": "{ rowId: string; columnId: string } | null"
        },
        {
          "name": "expandedRows",
          "type": "Set<string>"
        },
        {
          "name": "searchQuery",
          "type": "string"
        },
        {
          "name": "currentPage",
          "type": "number"
        },
        {
          "name": "isPerformanceWarning",
          "type": "boolean"
        },
        {
          "name": "virtualScroller",
          "type": "VirtualScroller | undefined"
        },
        {
          "name": "resizeObserver",
          "type": "ResizeObserver | undefined"
        },
        {
          "name": "debouncedSearch"
        },
        {
          "name": "gridPerformanceStartTime",
          "type": "number"
        },
        {
          "name": "gridBody",
          "type": "HTMLElement | undefined"
        },
        {
          "name": "gridHeader",
          "type": "HTMLElement | undefined"
        },
        {
          "name": "aiMetadata",
          "type": "AIMetadata"
        },
        {
          "name": "filteredData",
          "type": "GridData[]"
        }
      ],
      "events": [
        {
          "name": "sort",
          "description": "When column sorting changes"
        },
        {
          "name": "filter",
          "description": "When filters change"
        },
        {
          "name": "selection-change",
          "description": "When row selection changes"
        },
        {
          "name": "cell-edit",
          "description": "When cell editing occurs"
        },
        {
          "name": "row-expand",
          "description": "When row expansion state changes"
        },
        {
          "name": "column-resize",
          "description": "When column is resized"
        },
        {
          "name": "column-reorder",
          "description": "When columns are reordered"
        },
        {
          "name": "export-request",
          "description": "When data export is requested"
        }
      ],
      "slots": [
        {
          "name": "expanded-row",
          "description": "Custom content for expanded row details"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/organisms/data-grid.md",
        "source": "dist/components/data-grid/data-grid.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects",
          "actions": [
            {
              "name": "sort",
              "description": "Sort data by column",
              "availableCondition": "this.sortable && this.columns.some(col => col.sortable),\r\n        parameters: [\r\n          { name: 'columnId', type: 'selection', required: true, enum: this.columns.filter(c => c.sortable).map(c => c.id)"
            },
            {
              "name": "filter",
              "description": "Filter data by criteria",
              "availableCondition": "this.filterable,\r\n        parameters: [\r\n          { name: 'query', type: 'text', required: true"
            },
            {
              "name": "select",
              "description": "Select rows",
              "availableCondition": "this.selectable,\r\n        parameters: [\r\n          { name: 'rowIds', type: 'text', required: true"
            },
            {
              "name": "export",
              "description": "Export data",
              "availableCondition": "true,\r\n        parameters: [\r\n          { name: 'format', type: 'text', required: false, defaultValue: 'csv'"
            }
          ]
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-data-table",
      "tag": "forge-data-table",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "columns",
          "type": "TableColumn[]"
        },
        {
          "name": "rows",
          "type": "TableRow[]"
        },
        {
          "name": "loading",
          "type": "boolean"
        },
        {
          "name": "selectable",
          "type": "boolean"
        },
        {
          "name": "striped",
          "type": "boolean"
        },
        {
          "name": "expandable",
          "type": "boolean"
        },
        {
          "name": "selectionMode",
          "type": "'single' | 'multiple'"
        },
        {
          "name": "responsiveMode",
          "type": "'scroll' | 'stack' | 'hide'"
        },
        {
          "name": "showPagination",
          "type": "boolean"
        },
        {
          "name": "pageSize",
          "type": "number"
        },
        {
          "name": "virtualScrolling",
          "type": "boolean"
        },
        {
          "name": "virtualThreshold",
          "type": "number"
        },
        {
          "name": "performanceMode",
          "type": "'auto' | 'fast' | 'quality'"
        },
        {
          "name": "dataProvider",
          "type": "() => Promise<TableRow[]> | undefined"
        },
        {
          "name": "filters",
          "type": "Record<string, any> | undefined"
        },
        {
          "name": "lazyLoad",
          "type": "boolean"
        },
        {
          "name": "sortColumn",
          "type": "string | undefined"
        },
        {
          "name": "sortDirection",
          "type": "'asc' | 'desc'"
        },
        {
          "name": "selectedRows"
        },
        {
          "name": "expandedRows"
        },
        {
          "name": "currentPage",
          "type": "number"
        },
        {
          "name": "visibleRange",
          "type": "VirtualScrollerRange"
        },
        {
          "name": "dataLoading",
          "type": "boolean"
        },
        {
          "name": "dataError",
          "type": "Error | null"
        },
        {
          "name": "focusedCell",
          "type": "{ row: number, col: number } | null"
        },
        {
          "name": "virtualScroller",
          "type": "VirtualScroller | undefined"
        },
        {
          "name": "liveRegion",
          "type": "HTMLDivElement | undefined"
        },
        {
          "name": "debouncedSort"
        },
        {
          "name": "debouncedFilter"
        },
        {
          "name": "renderStartTime",
          "type": "number"
        },
        {
          "name": "performanceThreshold",
          "type": "number"
        },
        {
          "name": "paginatedRows"
        },
        {
          "name": "displayRows"
        },
        {
          "name": "totalPages"
        },
        {
          "name": "aiState",
          "type": "AIComponentState"
        }
      ],
      "events": [
        {
          "name": "sort",
          "description": "When column sorting changes",
          "detail": "CustomEvent"
        },
        {
          "name": "selectionchange",
          "description": "When row selection changes",
          "detail": "CustomEvent"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/organisms/data-table.md",
        "source": "dist/components/data-table/data-table.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-navigation-bar",
      "tag": "forge-navigation-bar",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "items",
          "type": "NavItem[]"
        },
        {
          "name": "logoSrc",
          "type": "string"
        },
        {
          "name": "title",
          "type": "string"
        },
        {
          "name": "activeRoute",
          "type": "string"
        },
        {
          "name": "position",
          "type": "'static' | 'fixed' | 'sticky'"
        },
        {
          "name": "showSearch",
          "type": "boolean"
        },
        {
          "name": "showThemeToggle",
          "type": "boolean"
        },
        {
          "name": "userName",
          "type": "string"
        },
        {
          "name": "userAvatar",
          "type": "string"
        },
        {
          "name": "mobileOpen",
          "type": "boolean"
        },
        {
          "name": "aiState",
          "type": "AIComponentState"
        }
      ],
      "events": [
        {
          "name": "navclick",
          "description": "When a navigation item is clicked",
          "detail": "CustomEvent"
        },
        {
          "name": "search",
          "description": "search event",
          "detail": "CustomEvent"
        },
        {
          "name": "themechange",
          "description": "themechange event",
          "detail": "CustomEvent"
        },
        {
          "name": "useraction",
          "description": "When a user menu action is selected",
          "detail": "CustomEvent"
        }
      ],
      "slots": [
        {
          "name": "trigger",
          "description": "Custom trigger content for dropdowns"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/organisms/navigation-bar.md",
        "source": "dist/components/navigation-bar/navigation-bar.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-pagination",
      "tag": "forge-pagination",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "currentPage",
          "type": "number"
        },
        {
          "name": "totalPages",
          "type": "number"
        },
        {
          "name": "pageSize",
          "type": "number"
        },
        {
          "name": "pageSizes",
          "type": "number[]"
        },
        {
          "name": "totalItems",
          "type": "number"
        },
        {
          "name": "showPageSize",
          "type": "boolean"
        },
        {
          "name": "showJumpTo",
          "type": "boolean"
        },
        {
          "name": "showTotal",
          "type": "boolean"
        },
        {
          "name": "mode",
          "type": "'pagination' | 'infinite' | 'load-more'"
        },
        {
          "name": "siblingCount",
          "type": "number"
        },
        {
          "name": "loading",
          "type": "boolean"
        },
        {
          "name": "hasMore",
          "type": "boolean"
        },
        {
          "name": "jumpValue",
          "type": "string"
        },
        {
          "name": "aiState",
          "type": "AIComponentState"
        }
      ],
      "events": [
        {
          "name": "pagechange",
          "description": "When page changes",
          "detail": "CustomEvent"
        },
        {
          "name": "pagesizechange",
          "description": "When page size changes",
          "detail": "CustomEvent"
        },
        {
          "name": "loadmore",
          "description": "loadmore event",
          "detail": "CustomEvent"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/organisms/pagination.md",
        "source": "dist/components/pagination/pagination.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-tabs",
      "tag": "forge-tabs",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "tabs",
          "type": "TabItem[]"
        },
        {
          "name": "activeTab",
          "type": "string | undefined"
        },
        {
          "name": "orientation",
          "type": "'horizontal' | 'vertical'"
        },
        {
          "name": "reorderable",
          "type": "boolean"
        },
        {
          "name": "rememberActive",
          "type": "boolean"
        },
        {
          "name": "lazyLoad",
          "type": "boolean"
        },
        {
          "name": "storageKey",
          "type": "string"
        },
        {
          "name": "draggedTab",
          "type": "TabItem | null"
        },
        {
          "name": "dragOverIndex",
          "type": "number"
        },
        {
          "name": "loadedPanels"
        },
        {
          "name": "aiState",
          "type": "AIComponentState"
        }
      ],
      "events": [
        {
          "name": "tabchange",
          "description": "When active tab changes",
          "detail": "CustomEvent"
        },
        {
          "name": "tabclose",
          "description": "When a tab is closed",
          "detail": "CustomEvent"
        },
        {
          "name": "tabreorder",
          "description": "When tabs are reordered",
          "detail": "CustomEvent"
        }
      ],
      "slots": [
        {
          "name": "tab-id",
          "description": "Tab content slots (named by tab ID)"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/organisms/tabs.md",
        "source": "dist/components/tabs/tabs.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    },
    {
      "id": "forge-tree-view",
      "tag": "forge-tree-view",
      "category": "atom",
      "props": [
        {
          "name": "styles"
        },
        {
          "name": "nodes",
          "type": "TreeNode[]"
        },
        {
          "name": "selectable",
          "type": "boolean"
        },
        {
          "name": "selectionMode",
          "type": "'single' | 'multiple'"
        },
        {
          "name": "showCheckboxes",
          "type": "boolean"
        },
        {
          "name": "showSearch",
          "type": "boolean"
        },
        {
          "name": "searchTerm",
          "type": "string"
        },
        {
          "name": "expandedNodes"
        },
        {
          "name": "selectedNodes"
        },
        {
          "name": "focusedNodeId",
          "type": "string | null"
        },
        {
          "name": "visibleRange",
          "type": "VirtualScrollerRange"
        },
        {
          "name": "flattenedNodes",
          "type": "FlattenedNode[]"
        },
        {
          "name": "virtualScroller",
          "type": "VirtualScroller | undefined"
        },
        {
          "name": "debouncedFlattenNodes"
        },
        {
          "name": "aiState",
          "type": "AIComponentState"
        }
      ],
      "events": [
        {
          "name": "nodeexpand",
          "description": "When a node is expanded or collapsed",
          "detail": "CustomEvent"
        },
        {
          "name": "nodeselect",
          "description": "When a node is selected",
          "detail": "CustomEvent"
        }
      ],
      "a11y": {},
      "examples": {
        "documentation": "docs/components/organisms/tree-view.md",
        "source": "dist/components/tree-view/tree-view.d.ts",
        "readme": "README.md"
      },
      "aiMethods": {
        "getPossibleActions": {
          "description": "Returns array of available actions for the component",
          "returns": "AIAction[] - Array of {name, description, available} objects"
        },
        "explainState": {
          "description": "Explains the current state of the component",
          "returns": "AIStateExplanation - {currentState, possibleStates, stateDescription}"
        },
        "aiState": {
          "description": "Getter that returns comprehensive component state for AI",
          "returns": "AIComponentState - Complete component metadata and state"
        }
      }
    }
  ]
}